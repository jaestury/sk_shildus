# 리스트 : N차원 배열 -> 동적 배열
# 예 : 10개 자리를 잡으면
# 자리 부족하면 자동으로 다시 10개 자리를 잡음
# 3개 채우고 나머지 7개 남으면 이걸 그대로 둠.
# 요즘 프로그램에서는 이것을 제어할 수 없다.
# 사용자가 임의로 코드에 손을 대게 되면 악성 코드로 인지하기도 한다.
# 데이터를 넣고, 수정하고, 삭제한다.
# 사용하는 기호는 []
# [] 안, 즉 리스트 안의 데이터를 `요소`라고 부른다.

arrayList1 = []  # 빈 리스트
# 파이썬은 데이터를 객체로 처리하기 때문에 데이터 형식이 자유롭다. 
# 배열에 어떤 데이터를 넣어도 무방!
arrayList2 = [999, 26.226, "홍길동", True] 
#             0     1       2       3
arrayData1 = arrayList2[0] # 첫번째
arrayData2 = arrayList2[1] # 두번째
arrayData3 = arrayList2[2] # 세번째
arrayData4 = arrayList2[3] # 네번째

arrayList2[2] = "이름 : 홍길동" # 3번째 요소의 데이터 변경

arrayData5 = arrayList2[-1] # 현재 리스트의 마지막 요소
arrayData6 = arrayList2[-2] # 맨 뒤에서 2번째 요소
# - 는 뒤에서부터 시작하는 것이라고 생각하면 편하다.

# 리스트 요소에서 특정 범위를 지정해서 가져오기.
# 슬라이싱, Slicing
# 리스트이름[처음요소가 있는 인덱스 번호 : 마지막 요소가 있는 인덱스 번호]
# 처음 요소가 있는 번호를 사용하지 않으면 무조건 0
# 마지막 요소가 있는 인덱스 번호. => 주의사항. 컴퓨터는 카운터를 0부터 센다.

# 콤마 뒤에는 한 칸을 띄우자. 권장 사항이며, 가독성을 증진할 수 있다.
arrayList3 = [11, 22, 33, 44, 55, 66, 77, 88, 99]

# 슬라이싱 : 마지막 인덱스에서는 일상생활의 카운터와 같다.(1부터 시작)
# 리스트의 요소를 접근할 때는 카운터가 0부터 시작한다.
# 콜론 앞에 있는 숫자는 0부터 카운트. 뒤에 있는 숫자는 1부터 카운트. 라고 생각하면 얼추 맞다.
arraySlicing1 = arrayList3[: 6] # [: ?] 콜론 앞에 아무것도 없기 때문에 0부터 시작.
arraySlicing2 = arrayList3[2 : 6] # [? : ?] 카운터 시작시에는 0부터 함. 
arraySlicing3 = arrayList3[2 : ] # [? : ] 콜론 뒤에 아무것도 없으면 앞에 있는 부분으로 시작해 나머지 다. 
arraySlicing4 = arrayList3[ : ] # [ : ] 모든 요소를 가져옴.

# 콜론 두 개 사용 가능. ::
arraySlicing5 = arrayList3[::2] # step : 건너뛰기. ::? 뒤에 있는 숫자 만큼 건너뛴다. 
arraySlicing6 = arrayList3[::-1] # - 를 사용하면 하면 역순으로 한다.



back =1 