# 파이썬은 순차적으로 실행되는 언어
# 한 줄 한 줄 실행됨
# 함수를 미리 만들어둬야만 함수 사용 가능. 중요중요!
# 함수 호출
# 아래에 함수 구현되어 있으면 : 함수 호출 불가.
# 앞에 써야할 기능이 구현되어 있지 않으면 사용할 수 없다.

# 함수 문법
# def 예약어 사용.
# def 이름 ()

# def myFuntion(매개변수) # 명명 규칙 준수. 
#     # 작성할 코드. 함수 기능
#     total = 100
# 함수 호출 - 함수 이름 () : 괄호 안에는 매개변수
# 매개변수에 필요한 값을 준다.

# 함수의 유형은 총 4가지 유형이 있다.
# 매개변수가 없고, 리턴이 없다
# 매개변수가 없고, 리턴이 있다.
# 매개변수가 있고, 리턴이 있다.
# 매개변수가 있고, 리턴이 없다.
# 위 네가지 형태가 전부. 필요에 따라 어떤 모양을 사용할지 고민하자.

# 1~100 까지 만들고 합을 구하는 것을 반복문으로 만들어 보았다.
# 기능으로 만들고 필요할 때 호출하자.
# 1~100 합 : 매개변수는 없고 리턴은 있고. 

# 콜론 사용 => if, for, 함수
def total() :   
    sum = 0
    # for 문 안에 쓰지 않았기 때문에 sum 변수를 인식한다.
    for i in range(101):
        sum = sum + i # sum += i

    return sum
    # 함수 안에서 사용한 변수는 함수 밖에서 사용할 수 없다. 
    # 변수의 수명주기로 인해 오류가 발생한다.
    # 함수 이름에는 중단점을 선언하지 못한다. 하나 마나임. 
    # 변수 선언할 때도 중단점을 찍지 않는다. 

def myFunction() : 
    myData = 100

def paraFunction(firstData) : 
    firstData = 1000

def paraReturn(ruturnData) : 
    returnData =  "홍길동"
    return returnData

data1 = total() # 함수 호출 : 매개변수 없고, 리턴 있는 함수.

myFunction() # 함수 호출 : 매개변수 없고, 리턴 없는 함수.

paraFunction(10) # 함수 호출 : 매개변수 있고, 리턴 없는 함수.

data2 = 200
data3 = paraReturn(data2) # 함수 호출 : 매개변수 있고, 리턴 있는 함수

# 함수 호출 : 매개변수 있고, 리턴 있는 함수 => 결과를 변수에 저장. 
paraReturn(99.99)

temp =1 

# 함수 디버깅할 필요가 없다면 한 프로시저 단위씩 실행하면 된다.
# 한 단계씩 실행 : 모든 디버깅 과정을 볼 수 있음.
# 프로시저 단위 실행 : 

# 실행 순서
# 처음에 함수인 def total() 정의
# data1 = total() 로 total() 사용. total() 함수 안으로 진입.
# sum 변수 선언됨. for문 밖에 선언했기 때문에 수명주기 만족.
# for 문 진행. sum을 리턴해줌. 